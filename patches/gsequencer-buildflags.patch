diff --git a/ChangeLog b/ChangeLog
index 0568552d6..6edbcb366 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+ags (4.5.1)
+
+	[ Joël Krähemann (Maintainer of Advanced Gtk+ Sequencer) ]
+	* added check LIBAGS_VST3_LIBDIR and LIBAGS_VST3_LIBS environment before set in configure.ac
+	* improved Makefile.am MIDI2XML_CFLAGS and MIDI2XML_LDFLAGS
+	* reverted updatehandler.h and updatehandler.cpp build vst3sdk with tag v3.7.7_build_19
+
 ags (4.5.0)
 
 	[ Joël Krähemann (Maintainer of Advanced Gtk+ Sequencer) ]
diff --git a/Makefile.am b/Makefile.am
index 9cbe8511a..ac42d4520 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -21,7 +21,7 @@ if AGS_WITH_DEBUG
 CPPFLAGS += -g
 endif
 
-CPPFLAGS += -include errno.h -DAGS_SRC_DIR=\"$(srcdir)\" -DAGS_DATA_DIR=\"$(datadir)\" -DAGS_DOC_DIR=\"$(docdir)\" -DPACKAGE_VERSION=\"$(PACKAGE_VERSION)\" -DAGS_REDUCE_RT_EVENTS=1
+CPPFLAGS += -DAGS_SRC_DIR=\"$(srcdir)\" -DAGS_DATA_DIR=\"$(datadir)\" -DAGS_DOC_DIR=\"$(docdir)\" -DPACKAGE_VERSION=\"$(PACKAGE_VERSION)\" -DAGS_REDUCE_RT_EVENTS=1
 
 if WITH_W32API
 else
@@ -38,7 +38,13 @@ endif
 CFLAGS =  @CFLAGS@
 CXXFLAGS =  @CXXFLAGS@
 
-LDFLAGS = @LDFLAGS@ $(LTLIBINTL)
+CFLAGS += -include errno.h
+
+if WITH_VST3
+CXXFLAGS += -include cstdio -include limits
+endif
+
+LDFLAGS = @LDFLAGS@ $(LTLIBINTL) -lstdc++
 LIBTOOL_DEPS = @LIBTOOL_DEPS@
 
 if WITH_W32API
@@ -48,10 +54,19 @@ PIC_FLAGS = -shared -fPIC
 endif
 
 gsequencer_CFLAGS = @GSEQUENCER_CFLAGS@
+gsequencer_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 gsequencer_LDFLAGS = @GSEQUENCER_LDFLAGS@
 
-midi2xml_CFLAGS = @GSEQUENCER_CFLAGS@
-midi2xml_LDFLAGS = @GSEQUENCER_LDFLAGS@
+midi2xml_CFLAGS = @MIDI2XML_CFLAGS@
+midi2xml_CXXFLAGS = @MIDI2XML_CXXFLAGS@
+midi2xml_LDFLAGS = @MIDI2XML_LDFLAGS@
+
+libags_vst3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
+libags_vst3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
+libags_vst3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
+libags_vst3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+libags_vst3_LIBDIR = @LIBAGS_VST3_LIBDIR@
+libags_vst3_LIBS = @LIBAGS_VST3_LIBS@
 
 if WITH_W32API
 LDFLAGS += -no-undefined -L$(top_builddir)/lib -lgnu -L/mingw64/lib -luuid_mingw -Wl,-subsystem,windows
@@ -743,6 +758,7 @@ endif
 # library libags
 libags_la_CPPFLAGS = -std=gnu99 $(CPPFLAGS) $(LIBAGS_CPPFLAGS)
 libags_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(UUID_CFLAGS) $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(GIO_CFLAGS) $(W32API_CFLAGS)
+libags_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(UUID_CFLAGS) $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(GIO_CFLAGS) $(W32API_CFLAGS)
 libags_la_LDFLAGS = $(LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread
 libags_la_LIBADD = -lm $(UUID_LIBS) $(LIBXML2_LIBS) $(GOBJECT_LIBS) $(GIO_LIBS) $(W32API_LIBS) 
 
@@ -760,6 +776,7 @@ endif
 # library libags-thread
 libags_thread_la_CPPFLAGS = -std=gnu99 $(CPPFLAGS) $(LIBAGS_THREAD_CPPFLAGS)
 libags_thread_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(W32API_CFLAGS)
+libags_thread_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(W32API_CFLAGS)
 libags_thread_la_LDFLAGS = $(LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread
 libags_thread_la_LIBADD = libags.la -lm $(LIBXML2_LIBS) $(GOBJECT_LIBS) $(W32API_LIBS)
 
@@ -777,8 +794,9 @@ endif
 # library libags-server
 libags_server_la_CPPFLAGS = -std=gnu99 $(CPPFLAGS) $(LIBAGS_SERVER_CPPFLAGS)
 libags_server_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(W32API_CFLAGS)
+libags_server_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(W32API_CFLAGS)
 libags_server_la_LDFLAGS = $(LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread
-libags_server_la_LIBADD = libags_thread.la libags.la -lm $(LIBXML2_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(W32API_LIBS)
+libags_server_la_LIBADD = -lm libags_thread.la libags.la $(LIBXML2_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(W32API_LIBS)
 
 if WITH_W32API
 libags_server_la_LDFLAGS += -Wl,--export-all-symbols,--out-implib=libags_server.dll.a
@@ -801,13 +819,16 @@ endif
 libags_audio_la_CPPFLAGS += $(CPPFLAGS) $(LIBAGS_AUDIO_CPPFLAGS)
 
 libags_audio_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBXML2_CFLAGS) $(SAMPLERATE_CFLAGS) $(SNDFILE_CFLAGS) $(FFTW_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(W32API_CFLAGS)
+libags_audio_la_CXXFLAGS = $(CXXFLAGS) $(libags_vst3_CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBXML2_CFLAGS) $(SAMPLERATE_CFLAGS) $(SNDFILE_CFLAGS) $(FFTW_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(W32API_CFLAGS)
 libags_audio_la_LDFLAGS = $(LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread 
-libags_audio_la_LIBADD = libags_server.la libags_thread.la libags.la
+libags_audio_la_LIBADD = -lm $(libags_vst3_LIBDIR) $(libags_vst3_LIBS) 
 
 if WITH_VST3
 libags_audio_la_LIBADD += libags_vst.la
 endif
 
+libags_audio_la_LIBADD += libags_server.la libags_thread.la libags.la
+
 libags_audio_la_LIBADD += -lm $(CORE_AUDIO_LIBS) $(WASAPI_LIBS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBXML2_LIBS) $(SAMPLERATE_LIBS) $(SNDFILE_LIBS) $(LIBINSTPATCH_LIBS) $(FFTW_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(W32API_LIBS)
 
 if WITH_W32API
@@ -827,6 +848,7 @@ endif
 # library libags-gui
 libags_gui_la_CPPFLAGS = -std=gnu99 $(CPPFLAGS) $(LIBAGS_GUI_CPPFLAGS)
 libags_gui_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(W32API_CFLAGS)
+libags_gui_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(W32API_CFLAGS)
 libags_gui_la_LDFLAGS = $(LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread
 libags_gui_la_LIBADD = -lm $(GOBJECT_LIBS) $(CAIRO_LIBS) $(GTK_LIBS) $(W32API_LIBS)
 
@@ -850,8 +872,15 @@ endif
 
 libgsequencer_la_CPPFLAGS += $(CPPFLAGS) $(LIBGSEQUENCER_CPPFLAGS)
 libgsequencer_la_CFLAGS = $(CFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBXML2_CFLAGS) $(SNDFILE_CFLAGS) $(FFTW_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
+libgsequencer_la_CXXFLAGS = $(CXXFLAGS) $(libags_vst3_CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBXML2_CFLAGS) $(SNDFILE_CFLAGS) $(FFTW_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(LIBSOUP_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
 libgsequencer_la_LDFLAGS = $(LDFLAGS) -version-info 0:1:0 $(PIC_FLAGS) -pthread
-libgsequencer_la_LIBADD = libags_audio.la libags_server.la libags_gui.la libags_thread.la libags.la -lm $(CORE_AUDIO_LIBS) $(WASAPI_LIBS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBXML2_LIBS) $(FFTW_LIBS) $(SNDFILE_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(CAIRO_LIBS) $(GTK_LIBS) $(GTK_UNIX_PRINT_LIBS) $(POPPLER_LIBS) $(W32API_LIBS)
+libgsequencer_la_LIBADD = -lm $(libags_vst3_LIBDIR) $(libags_vst3_LIBS)
+
+if WITH_VST3
+libgsequencer_la_LIBADD += libags_vst.la
+endif
+
+libgsequencer_la_LIBADD += libags_audio.la libags_server.la libags_gui.la libags_thread.la libags.la $(CORE_AUDIO_LIBS) $(WASAPI_LIBS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBXML2_LIBS) $(FFTW_LIBS) $(SNDFILE_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(CAIRO_LIBS) $(GTK_LIBS) $(GTK_UNIX_PRINT_LIBS) $(POPPLER_LIBS) $(W32API_LIBS)
 
 if WITH_W32API
 libgsequencer_la_CPPFLAGS += -DAGS_LIBRARY_SUFFIX=\".dll\"
@@ -868,10 +897,10 @@ endif
 
 # library libags-vst
 if WITH_VST3
-libags_vst_la_CPPFLAGS = -std=gnu++2a $(LIBAGS_VST3_RELEASE_TYPE) $(LIBAGS_VST3_CPPFLAGS) -Wall -Wformat -Werror=format-security -Werror=return-type -Werror=uninitialized -Werror=maybe-uninitialized
-libags_vst_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(GLIB_CFLAGS) $(LIBAGS_VST3_CXXFLAGS) $(W32API_CFLAGS)
-libags_vst_la_LDFLAGS = $(LDFLAGS) $(LIBAGS_VST3_LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread 
-libags_vst_la_LIBADD = -lm $(LIBAGS_VST3_LIBS) -lbase -lpluginterfaces -lsdk -lsdk_common -lsdk_hosting -lvstgui -lvstgui_standalone -lvstgui_support -lvstgui_uidescription $(GLIB_LIBS) $(W32API_LIBS)
+libags_vst_la_CPPFLAGS = -std=gnu++2a $(libags_vst3_RELEASE_TYPE) $(libags_vst3_CPPFLAGS) -Wall -Wformat -Werror=format-security -Werror=return-type -Werror=uninitialized -Werror=maybe-uninitialized
+libags_vst_la_CXXFLAGS = $(CXXFLAGS) $(COMPILER_FLAGS) $(WARN_FLAGS) -O -I./ $(GLIB_CFLAGS) $(libags_vst3_CXXFLAGS) $(W32API_CFLAGS)
+libags_vst_la_LDFLAGS = $(LDFLAGS) $(libags_vst3_LDFLAGS) -version-info 4:0:0 $(PIC_FLAGS) -pthread 
+libags_vst_la_LIBADD = -lm $(libags_vst3_LIBDIR) $(libags_vst3_LIBS) $(GLIB_LIBS) $(W32API_LIBS)
 
 if WITH_W32API
 libags_vst_la_LDFLAGS += -Wl,--export-all-symbols,--out-implib=libags_vst.dll.a
@@ -897,8 +926,15 @@ endif
 gsequencer_CPPFLAGS += $(CPPFLAGS)
 
 gsequencer_CFLAGS += $(CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBAO_CFLAGS) $(LIBXML2_CFLAGS) $(LIBSOUP_CFLAGS) $(SNDFILE_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
+gsequencer_CXXFLAGS += $(CXXFLAGS) $(libags_vst3_CXXFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBAO_CFLAGS) $(LIBXML2_CFLAGS) $(LIBSOUP_CFLAGS) $(SNDFILE_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
 gsequencer_LDFLAGS += -pthread
-gsequencer_LDADD = libgsequencer.la libags_audio.la libags_server.la libags_gui.la libags_thread.la libags.la -lm $(RT_LIBS) $(X11_LIBS) $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBAO_LIBS) $(LIBXML2_LIBS) $(LIBSOUP_LIBS) $(SNDFILE_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(GOBJECT_LIBS) $(CAIRO_LIBS) $(GTK_LIBS) $(GTK_UNIX_PRINT_LIBS) $(POPPLER_LIBS) $(W32API_LIBS)
+gsequencer_LDADD = -lm $(libags_vst3_LIBDIR) $(libags_vst3_LIBS) 
+
+if WITH_VST3
+gsequencer_LDADD += libags_vst.la
+endif
+
+gsequencer_LDADD += libgsequencer.la libags_audio.la libags_server.la libags_gui.la libags_thread.la libags.la $(RT_LIBS) $(X11_LIBS) $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBAO_LIBS) $(LIBXML2_LIBS) $(LIBSOUP_LIBS) $(SNDFILE_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(GOBJECT_LIBS) $(CAIRO_LIBS) $(GTK_LIBS) $(GTK_UNIX_PRINT_LIBS) $(POPPLER_LIBS) $(W32API_LIBS)
 
 if WITH_OSXAPI
 gsequencer_LDFLAGS += -framework Cocoa
@@ -912,6 +948,35 @@ gsequencer_LDADD += -ldl
 endif
 endif
 
+midi2xml_SOURCES = ags/midi2xml_main.c
+
+if WITH_OSXAPI
+midi2xml_CPPFLAGS = -x objective-c -framework Cocoa
+else
+midi2xml_CPPFLAGS = -std=gnu99
+endif
+
+midi2xml_CPPFLAGS += $(CPPFLAGS)
+
+midi2xml_CFLAGS += $(CFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBAO_CFLAGS) $(LIBXML2_CFLAGS) $(LIBSOUP_CFLAGS) $(SNDFILE_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
+midi2xml_CXXFLAGS += $(CXXFLAGS) $(libags_vst3_CXXFLAGS) $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBAO_CFLAGS) $(LIBXML2_CFLAGS) $(LIBSOUP_CFLAGS) $(SNDFILE_CFLAGS) $(JACK_CFLAGS) $(PULSE_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(GOBJECT_CFLAGS) $(CAIRO_CFLAGS) $(GTK_CFLAGS) $(GTK_UNIX_PRINT_CFLAGS) $(POPPLER_CFLAGS) $(W32API_CFLAGS)
+midi2xml_LDFLAGS += -pthread
+midi2xml_LDADD = -lm $(libags_vst3_LIBDIR) $(libags_vst3_LIBS)
+
+if WITH_VST3
+midi2xml_LDADD += libags_vst.la
+endif
+
+midi2xml_LDADD += libags_audio.la libags_server.la libags_thread.la libags.la $(RT_LIBS) $(CORE_AUDIO_CFLAGS) $(WASAPI_CFLAGS) $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBAO_LIBS) $(LIBXML2_LIBS) $(LIBSOUP_LIBS) $(SNDFILE_LIBS) $(JACK_LIBS) $(PULSE_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(GOBJECT_LIBS) $(W32API_LIBS)
+
+if WITH_W32API
+else
+if WITH_OSXAPI
+else
+midi2xml_LDADD += -ldl
+endif
+endif
+
 # unit and functional tests
 check_PROGRAMS = 
 
@@ -3154,6 +3219,8 @@ libags_vst_c_sources = \
 	$(deprecated_libags_vst_c_sources) \
 	ags/vst3-capi/host/ags_vst_component_handler.cpp \
 	ags/vst3-capi/host/ags_vst_host_context.cpp \
+	ags/vst3-capi/host/updatehandler.h \
+	ags/vst3-capi/host/updatehandler.cpp \
 	ags/vst3-capi/host/componenthandler.h \
 	ags/vst3-capi/host/hostcontext.h \
 	ags/vst3-capi/host/componenthandler.cpp \
@@ -3229,22 +3296,6 @@ gsequencer_c_sources += \
 	ags/app/ags_gsequencer_resource.c
 endif
 
-midi2xml_CPPFLAGS = -std=gnu99 $(CPPFLAGS) 
-midi2xml_CFLAGS += $(CFLAGS) -I./ $(LIBASOUND2_CFLAGS) $(LIBDSSIALSACOMPAT_CFLAGS) $(LIBXML2_CFLAGS) $(GOBJECT_CFLAGS) $(GIO_CFLAGS) $(GSTREAMER_CFLAGS) $(LIBINSTPATCH_CFLAGS) $(LIBSOUP_CFLAGS) $(W32API_CFLAGS)
-midi2xml_LDFLAGS += $(LIBASOUND2_LIBS) $(LIBDSSIALSACOMPAT_LIBS) $(LIBXML2_LIBS) $(GOBJECT_LIBS) $(LIBSOUP_LIBS) $(GSTREAMER_LIBS) $(LIBINSTPATCH_LIBS) $(W32API_LIBS)
-midi2xml_LDADD = libags_audio.la libags_server.la libags_gui.la libags_thread.la libags.la
-
-if WITH_W32API
-else
-if WITH_OSXAPI
-midi2xml_LDADD += -ldl
-midi2xml_CFLAGS += -I/usr/include -I/opt/local/include -I/opt/local/include/dssi
-else
-endif
-endif
-
-midi2xml_SOURCES = ags/midi2xml_main.c
-
 ags-integration-unit-test: 
 	$(MAKE) -C $(top_srcdir) -f unit-system-tests.mk ags-check-system-unit-test
 
diff --git a/README b/README
index 05a12a6d6..63926c419 100644
--- a/README
+++ b/README
@@ -76,7 +76,7 @@ To build gsequencer with VST3 support you need download and compile the VST3 SDK
 export CXXFLAGS="-include cstdio -std=gnu++20 -fpermissive"
 export LIBAGS_VST3_RELEASE_TYPE="-DRELEASE"
 export LIBAGS_VST3_CPPFLAGS="-I$HOME/github/vst3sdk"
-export LIBAGS_VST3_LIBS="-L$HOME/github/vst3sdk/build/lib"
+export LIBAGS_VST3_LIBDIR="-L$HOME/github/vst3sdk/build/lib"
 
 $ ./configure --prefix=/usr --enable-vst3
 $ make -j8
diff --git a/ags/vst3-capi/host/updatehandler.cpp b/ags/vst3-capi/host/updatehandler.cpp
new file mode 100644
index 000000000..e8e61374b
--- /dev/null
+++ b/ags/vst3-capi/host/updatehandler.cpp
@@ -0,0 +1,749 @@
+//------------------------------------------------------------------------
+// Project     : SDK Base
+// Version     : 1.0
+//
+// Category    : Helpers
+// Filename    : base/source/updatehandler.cpp
+// Created by  : Steinberg, 2008
+// Description :
+//
+//-----------------------------------------------------------------------------
+// LICENSE
+// (c) 2021, Steinberg Media Technologies GmbH, All Rights Reserved
+//-----------------------------------------------------------------------------
+// Redistribution and use in source and binary forms, with or without modification,
+// are permitted provided that the following conditions are met:
+// 
+//   * Redistributions of source code must retain the above copyright notice, 
+//     this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//     this list of conditions and the following disclaimer in the documentation 
+//     and/or other materials provided with the distribution.
+//   * Neither the name of the Steinberg Media Technologies nor the names of its
+//     contributors may be used to endorse or promote products derived from this 
+//     software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
+// IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  OF THIS SOFTWARE, EVEN IF ADVISED
+// OF THE POSSIBILITY OF SUCH DAMAGE.
+//-----------------------------------------------------------------------------
+
+/* GSequencer - Advanced GTK Sequencer
+ * Copyright (C) 2005-2021 Joël Krähemann
+ *
+ * This file is part of GSequencer.
+ *
+ * GSequencer is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * GSequencer is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GSequencer.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "base/source/updatehandler.h"
+#include "base/source/classfactoryhelpers.h"
+#include "base/source/fstring.h"
+
+#if SMTG_CPP11_STDLIBSUPPORT
+#include <unordered_map>
+#else
+#include <map>
+#endif
+#include <deque>
+#include <vector>
+#include <algorithm>
+
+#define NON_EXISTING_DEPENDENCY_CHECK 0 // not yet
+#define CLASS_NAME_TRACKED DEVELOPMENT
+
+using Steinberg::Base::Thread::FGuard;
+
+namespace Steinberg {
+
+DEF_CLASS_IID (IUpdateManager)
+
+namespace Update {
+const uint32 kHashSize = (1 << 8); // must be power of 2 (16 bytes * 256 == 4096)
+const uint32 kMapSize = 1024 * 10;
+
+//------------------------------------------------------------------------
+inline uint32 hashPointer (void* p)
+{
+	return (uint32)((uint64 (p) >> 12) & (kHashSize - 1));
+}
+
+//------------------------------------------------------------------------
+inline IPtr<FUnknown> getUnknownBase (FUnknown* unknown)
+{
+	FUnknown* result = nullptr;
+	if (unknown)
+		unknown->queryInterface (FUnknown::iid, (void**)&result);
+
+	return owned (result);
+}
+
+#if CLASS_NAME_TRACKED
+//------------------------------------------------------------------------
+struct Dependency
+{
+	Dependency (FUnknown* o, IDependent* d)
+	: obj (o), dep (d), objClass (nullptr), depClass (nullptr)
+	{
+	}
+
+	inline bool operator== (const Dependency& d) const { return obj == d.obj; }
+	inline bool operator!= (const Dependency& d) const { return obj != d.obj; }
+	inline bool operator< (const Dependency& d) const { return obj < d.obj; }
+	inline bool operator> (const Dependency& d) const { return obj > d.obj; }
+	FUnknown* obj;
+	IDependent* dep;
+
+	FClassID objClass;
+	FClassID depClass;
+};
+#endif
+
+//------------------------------------------------------------------------
+struct DeferedChange
+{
+	DeferedChange (FUnknown* o, int32 m = 0) : obj (o), msg (m) {}
+	~DeferedChange () {}
+	DeferedChange (const DeferedChange& r) : obj (r.obj), msg (r.msg) {}
+	inline bool operator== (const DeferedChange& d) const { return obj == d.obj; }
+	inline bool operator!= (const DeferedChange& d) const { return obj != d.obj; }
+	FUnknown* obj;
+	int32 msg;
+};
+
+//------------------------------------------------------------------------
+struct UpdateData
+{
+	UpdateData (FUnknown* o, IDependent** d, uint32 c)
+	: obj (o), dependents (d), count (c)
+	{
+	}
+	FUnknown* obj;
+	IDependent** dependents;
+	uint32 count;
+	bool operator== (const UpdateData& d) const
+	{
+		return d.obj == obj && d.dependents == dependents;
+	}
+};
+
+//------------------------------------------------------------------------
+using DeferedChangeList = std::deque<DeferedChange>;
+using DeferedChangeListIterConst = DeferedChangeList::const_iterator;
+using DeferedChangeListIter = DeferedChangeList::iterator;
+
+using UpdateDataList = std::deque<UpdateData>;
+using UpdateDataListIterConst = UpdateDataList::const_iterator;
+
+#if CLASS_NAME_TRACKED
+using DependentList = std::vector<Dependency>;
+#else
+typedef std::vector<IDependent*> DependentList;
+#endif
+using DependentListIter = DependentList::iterator;
+using DependentListIterConst = DependentList::const_iterator;
+
+#if SMTG_CPP11_STDLIBSUPPORT
+using DependentMap = std::unordered_map<const FUnknown*, DependentList>;
+#else
+typedef std::map<const FUnknown*, DependentList> DependentMap;
+#endif
+using DependentMapIter = DependentMap::iterator;
+using DependentMapIterConst = DependentMap::const_iterator;
+
+struct Table
+{
+	DependentMap depMap[kHashSize];
+	DeferedChangeList defered;
+	UpdateDataList updateData;
+};
+
+//------------------------------------------------------------------------
+void updateDone (FUnknown* unknown, int32 message)
+{
+	if (message != IDependent::kDestroyed)
+	{
+		FObject* obj = FObject::unknownToObject (unknown);
+		if (obj)
+			obj->updateDone (message);
+	}
+}
+} // namespace Update
+
+//------------------------------------------------------------------------
+static int32 countEntries (Update::DependentMap& map)
+{
+	int32 total = 0;
+	Update::DependentMapIterConst iterMap = map.begin ();
+	while (iterMap != map.end ())
+	{
+		const Update::DependentList& list = iterMap->second;
+		Update::DependentListIterConst iterList = list.begin ();
+		while (iterList != list.end ())
+		{
+			total++;
+			++iterList;
+		}
+		++iterMap;
+	}
+	return total;
+}
+
+//------------------------------------------------------------------------
+UpdateHandler::UpdateHandler ()
+{
+	table = NEW Update::Table;
+	if (FObject::getUpdateHandler () == nullptr)
+		FObject::setUpdateHandler (this);
+}
+
+//------------------------------------------------------------------------
+UpdateHandler::~UpdateHandler ()
+{
+	if (FObject::getUpdateHandler () == this)
+		FObject::setUpdateHandler (nullptr);
+	delete table;
+	table = nullptr;
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::addDependent (FUnknown* u, IDependent* _dependent)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (!unknown || !_dependent)
+		return kResultFalse;
+
+	FGuard guard (lock);
+
+#if CLASS_NAME_TRACKED
+	Update::Dependency dependent (unknown, _dependent);
+
+	FObject* obj = FObject::unknownToObject (unknown);
+	if (obj)
+		dependent.objClass = obj->isA ();
+	obj = FObject::unknownToObject (_dependent);
+	if (obj)
+		dependent.depClass = obj->isA ();
+#else
+	IDependent* dependent = _dependent;
+#endif
+
+	Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+	Update::DependentMapIter it = map.find (unknown);
+	if (it == map.end ())
+	{
+		Update::DependentList list;
+		list.push_back (dependent);
+		map[unknown] = list;
+	}
+	else
+	{
+		(*it).second.push_back (dependent);
+	}
+
+	return kResultTrue;
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::removeDependent (FUnknown* u, IDependent* dependent)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (unknown == nullptr && dependent == nullptr)
+		return kResultFalse;
+
+	FGuard guard (lock);
+
+	Update::UpdateDataListIterConst iter = table->updateData.begin ();
+	while (iter != table->updateData.end ())
+	{
+		if ((*iter).obj == unknown || unknown == nullptr)
+		{
+			for (uint32 count = 0; count < (*iter).count; count++)
+			{
+				if ((*iter).dependents[count] == dependent)
+					(*iter).dependents[count] = nullptr;
+			}
+		}
+		++iter;
+	}
+	// Remove all objects for the given dependent
+	if (unknown == nullptr)
+	{
+		for (uint32 j = 0; j < Update::kHashSize; j++)
+		{
+			Update::DependentMap& map = table->depMap[j];
+			Update::DependentMapIter iterMap = map.begin ();
+			while (iterMap != map.end ())
+			{
+				Update::DependentList& list = (*iterMap).second;
+				Update::DependentListIter iterList = list.begin ();
+				bool listIsEmpty = false;
+				
+				while (iterList != list.end ())
+				{
+#if CLASS_NAME_TRACKED
+					if ((*iterList).dep == dependent)
+#else
+					if ((*iterList) == dependent)
+#endif
+					{
+						if (list.size () == 1u)
+						{
+							listIsEmpty = true;
+							break;
+						}
+						else
+							iterList = list.erase (iterList);
+					}
+					else
+					{
+						++iterList;
+					}
+				}
+				
+				if (listIsEmpty)
+					iterMap = map.erase (iterMap);
+				else
+					++iterMap;
+			}
+		}
+	}
+	else
+	{
+		bool mustFlush = true;
+
+		Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+		Update::DependentMapIter iterList = map.find (unknown);
+
+#if NON_EXISTING_DEPENDENCY_CHECK
+		SMTG_ASSERT (iterList != map.end () && "ERROR: Trying to remove a non existing dependency!")
+#endif
+		if (iterList != map.end ())
+		{
+			if (dependent == nullptr) // Remove all dependents of object
+			{
+				map.erase (iterList);
+			}
+			else // Remove one dependent
+			{
+				int32 eraseCount = 0;
+				Update::DependentList& dependentlist = (*iterList).second;
+				Update::DependentListIter iterDependentlist = dependentlist.begin ();
+				while (iterDependentlist != dependentlist.end ())
+				{
+#if CLASS_NAME_TRACKED
+					if ((*iterDependentlist).dep == dependent)
+#else
+					if ((*iterDependentlist) == dependent)
+#endif
+					{
+						iterDependentlist = dependentlist.erase (iterDependentlist);
+						eraseCount++;
+						if (dependentlist.empty ())
+						{
+							map.erase (iterList);
+							break;
+						}
+					}
+					else
+					{
+						++iterDependentlist;
+						mustFlush = false;
+					}
+				}
+			}
+		}
+		if (mustFlush)
+			cancelUpdates (unknown);
+	}
+
+	return kResultTrue;
+}
+
+//------------------------------------------------------------------------
+tresult UpdateHandler::doTriggerUpdates (FUnknown* u, int32 message, bool suppressUpdateDone)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (!unknown)
+		return kResultFalse;
+
+	// to avoid crashes due to stack overflow, we reduce the amount of memory reserved for the
+	// dependents
+	IDependent* smallDependents[Update::kMapSize / 10]; // 8kB for x64
+	IDependent** dependents = smallDependents;
+	int32 maxDependents = Update::kMapSize / 10;
+	int32 count = 0;
+
+	{
+		FGuard guard (lock); // scope for lock
+
+		Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+		Update::DependentMapIterConst iterList = map.find (unknown);
+		if (iterList != map.end ())
+		{
+			const Update::DependentList& dependentlist = (*iterList).second;
+			Update::DependentListIterConst iterDependentlist = dependentlist.begin ();
+			while (iterDependentlist != dependentlist.end ())
+			{
+#if CLASS_NAME_TRACKED
+				dependents[count] = (*iterDependentlist).dep;
+#else
+				dependents[count] = *iterDependentlist;
+#endif
+				count++;
+
+				if (count >= maxDependents)
+				{
+					if (dependents == smallDependents)
+					{
+						dependents = NEW IDependent*[Update::kMapSize];
+						memcpy (dependents, smallDependents, count * sizeof (dependents[0]));
+						maxDependents = Update::kMapSize;
+					}
+					else
+					{
+						SMTG_WARNING ("Dependency overflow")
+						break;
+					}
+				}
+				++iterDependentlist;
+			}
+		}
+
+		// push update data on the stack
+		if (count > 0)
+		{
+			Update::UpdateData data (unknown, dependents, count);
+			table->updateData.push_back (data);
+		}
+	} // end scope
+
+	int32 i = 0;
+	while (i < count)
+	{
+		if (dependents[i])
+			dependents[i]->update (unknown, message);
+		i++;
+	}
+
+	if (dependents != smallDependents)
+		delete[] dependents;
+
+	// remove update data from the stack
+	if (count > 0)
+	{
+		FGuard guard (lock);
+
+		table->updateData.pop_back ();
+	}
+
+	// send update done message
+	if (suppressUpdateDone == false)
+		Update::updateDone (unknown, message);
+
+	return count > 0 ? kResultTrue : kResultFalse; // Object was found and has been updated
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::triggerUpdates (FUnknown* u, int32 message)
+{
+	return doTriggerUpdates (u, message, false);
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::deferUpdates (FUnknown* u, int32 message)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (!unknown)
+		return kResultFalse;
+
+	FGuard guard (lock);
+
+	Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+	Update::DependentMapIterConst iterList = map.find (unknown);
+
+	bool hasDependency = (iterList != map.end ());
+	if (hasDependency == false)
+	{
+		Update::updateDone (unknown, message);
+		return kResultTrue;
+	}
+
+	bool found = false;
+	Update::DeferedChangeListIterConst iter = table->defered.begin ();
+	while (iter != table->defered.end ())
+	{
+		if ((*iter).obj == unknown && (*iter).msg == message)
+		{
+			found = true;
+			break;
+		}
+		++iter;
+	}
+
+	if (!found)
+	{
+		Update::DeferedChange change (unknown, message);
+		table->defered.push_back (change);
+	}
+
+	return kResultTrue;
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::triggerDeferedUpdates (FUnknown* unknown)
+{
+	Update::DeferedChangeList deferedAgain;
+	if (!unknown)
+	{
+		while (table->defered.empty () == false)
+		{
+			// Remove first from queue
+			lock.lock ();
+
+			FUnknown* obj = table->defered.front ().obj;
+			int32 msg = table->defered.front ().msg;
+			table->defered.pop_front ();
+
+			// check if this object is currently being updated. in this case, defer update again...
+			bool canSignal = true;
+			Update::UpdateDataListIterConst iter = table->updateData.begin ();
+			while (iter != table->updateData.end ())
+			{
+				if ((*iter).obj == obj)
+				{
+					canSignal = false;
+					break;
+				}
+				++iter;
+			}
+			lock.unlock ();
+
+			if (canSignal)
+			{
+				triggerUpdates (obj, msg);
+			}
+			else
+			{
+				Update::DeferedChange change (obj, msg);
+				deferedAgain.push_back (change);
+			}
+		}
+	}
+	else
+	{
+		IPtr<FUnknown> object = Update::getUnknownBase (unknown);
+		Update::DeferedChange tmp (object);
+
+		while (true)
+		{
+			lock.lock ();
+			Update::DeferedChangeListIter it =
+			    std::find (table->defered.begin (), table->defered.end (), tmp);
+			if (it == table->defered.end ())
+			{
+				lock.unlock ();
+				return kResultTrue;
+			}
+
+			if ((*it).obj != nullptr)
+			{
+				int32 msg = (*it).msg;
+				table->defered.erase (it);
+
+				// check if this object is currently being updated. in this case, defer update
+				// again...
+				bool canSignal = true;
+				Update::UpdateDataListIterConst iter = table->updateData.begin ();
+				while (iter != table->updateData.end ())
+				{
+					if ((*iter).obj == object)
+					{
+						canSignal = false;
+						break;
+					}
+					++iter;
+				}
+				lock.unlock ();
+
+				if (canSignal)
+				{
+					triggerUpdates (object, msg);
+				}
+				else
+				{
+					Update::DeferedChange change (object, msg);
+					deferedAgain.push_back (change);
+				}
+			}
+		}
+	}
+
+	if (deferedAgain.empty () == false)
+	{
+		FGuard guard (lock);
+
+		Update::DeferedChangeListIterConst iter = deferedAgain.begin ();
+		while (iter != deferedAgain.end ())
+		{
+			table->defered.push_back (*iter);
+			++iter;
+		}
+	}
+
+	return kResultTrue;
+}
+
+//------------------------------------------------------------------------
+tresult PLUGIN_API UpdateHandler::cancelUpdates (FUnknown* u)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (!unknown)
+		return kResultFalse;
+
+	FGuard guard (lock);
+
+	Update::DeferedChange change (unknown, 0);
+	while (true)
+	{
+		auto iter = std::find (table->defered.begin (), table->defered.end (), change);
+		if (iter != table->defered.end ())
+			table->defered.erase (iter);
+		else
+			break;
+	}
+
+	return kResultTrue;
+}
+
+//------------------------------------------------------------------------
+size_t UpdateHandler::countDependencies (FUnknown* object)
+{
+	FGuard guard (lock);
+	uint32 res = 0;
+
+	IPtr<FUnknown> unknown = Update::getUnknownBase (object);
+	if (unknown)
+	{
+		Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+		Update::DependentMapIter iterList = map.find (unknown);
+		if (iterList != map.end ())
+			return iterList->second.size ();
+	}
+	else
+	{
+		for (uint32 j = 0; j < Update::kHashSize; j++)
+		{
+			Update::DependentMap& map = table->depMap[j];
+			res += countEntries (map);
+		}
+	}
+	return res;
+}
+
+#if DEVELOPMENT
+//------------------------------------------------------------------------
+bool UpdateHandler::checkDeferred (FUnknown* object)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (object);
+
+	FGuard guard (lock);
+
+	Update::DeferedChange tmp (unknown);
+	Update::DeferedChangeListIterConst it =
+	    std::find (table->defered.begin (), table->defered.end (), tmp);
+	if (it != table->defered.end ())
+		return true;
+
+	return false;
+}
+
+//------------------------------------------------------------------------
+bool UpdateHandler::hasDependencies (FUnknown* u)
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (u);
+	if (!unknown)
+		return false;
+
+	FGuard guard (lock);
+
+	Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+	Update::DependentMapIterConst iterList = map.find (unknown);
+	bool hasDependency = (iterList != map.end ());
+
+	return hasDependency;
+}
+
+//------------------------------------------------------------------------
+void UpdateHandler::printForObject (FObject* obj) const
+{
+	IPtr<FUnknown> unknown = Update::getUnknownBase (obj);
+	if (!unknown)
+		return;
+
+	FUnknownPtr<IDependent> dep (obj);
+
+	bool header = false;
+
+	Update::DependentMap& map = table->depMap[Update::hashPointer (unknown)];
+	Update::DependentMapIterConst iterList = map.begin ();
+	while (iterList != map.end ())
+	{
+		const Update::DependentList& dependentlist = (*iterList).second;
+		Update::DependentListIterConst iterDependentlist = dependentlist.begin ();
+		while (iterDependentlist != dependentlist.end ())
+		{
+#if CLASS_NAME_TRACKED
+			if ((*iterList).first == unknown || (*iterDependentlist).dep == dep.getInterface ())
+			{
+				if (!header)
+				{
+					FDebugPrint ("Dependencies for object %8" FORMAT_INT64A " %s\n", (uint64)obj,
+					             obj->isA ());
+					header = true;
+				}
+				FDebugPrint ("%s %8" FORMAT_INT64A "\n <- %s %8" FORMAT_INT64A "\n",
+				             (*iterDependentlist).depClass, (uint64) (*iterDependentlist).dep,
+				             (*iterDependentlist).objClass, (uint64) ((*iterList).first));
+			}
+#else
+			if ((*iterList).first == unknown || (*iterDependentlist) == dep.getInterface ())
+			{
+				if (!header)
+				{
+					FDebugPrint ("Dependencies for object %8" FORMAT_INT64A " %s\n", (uint64)obj,
+					             obj->isA ());
+					header = true;
+				}
+				FDebugPrint ("%8" FORMAT_INT64A "\n <- %8" FORMAT_INT64A "\n",
+				             (uint64) (*iterDependentlist), (uint64) ((*iterList).first));
+			}
+#endif
+			++iterDependentlist;
+		}
+
+		++iterList;
+	}
+}
+#endif
+
+//------------------------------------------------------------------------
+} // namespace Steinberg
diff --git a/ags/vst3-capi/host/updatehandler.h b/ags/vst3-capi/host/updatehandler.h
new file mode 100644
index 000000000..77a2eca56
--- /dev/null
+++ b/ags/vst3-capi/host/updatehandler.h
@@ -0,0 +1,158 @@
+//------------------------------------------------------------------------
+// Project     : SDK Base
+// Version     : 1.0
+//
+// Category    : Helpers
+// Filename    : base/source/updatehandler.h
+// Created by  : Steinberg, 2008
+// Description :
+//
+//-----------------------------------------------------------------------------
+// LICENSE
+// (c) 2021, Steinberg Media Technologies GmbH, All Rights Reserved
+//-----------------------------------------------------------------------------
+// Redistribution and use in source and binary forms, with or without modification,
+// are permitted provided that the following conditions are met:
+// 
+//   * Redistributions of source code must retain the above copyright notice, 
+//     this list of conditions and the following disclaimer.
+//   * Redistributions in binary form must reproduce the above copyright notice,
+//     this list of conditions and the following disclaimer in the documentation 
+//     and/or other materials provided with the distribution.
+//   * Neither the name of the Steinberg Media Technologies nor the names of its
+//     contributors may be used to endorse or promote products derived from this 
+//     software without specific prior written permission.
+// 
+// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
+// IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE  OF THIS SOFTWARE, EVEN IF ADVISED
+// OF THE POSSIBILITY OF SUCH DAMAGE.
+//-----------------------------------------------------------------------------
+
+/* GSequencer - Advanced GTK Sequencer
+ * Copyright (C) 2005-2021 Joël Krähemann
+ *
+ * This file is part of GSequencer.
+ *
+ * GSequencer is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * GSequencer is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with GSequencer.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#pragma once
+
+#include "base/source/fobject.h"
+#include "base/thread/include/flock.h"
+#include "pluginterfaces/base/iupdatehandler.h"
+
+namespace Steinberg {
+
+/// @cond ignore
+namespace Update { struct Table; }
+/// @endcond
+
+//------------------------------------------------------------------------
+/** Handle Send and Cancel pending message for a given object*/
+//------------------------------------------------------------------------
+class IUpdateManager : public FUnknown
+{
+public:
+//------------------------------------------------------------------------
+	/** cancel pending messages send by \param object or by any if object is 0 */
+	virtual tresult PLUGIN_API cancelUpdates (FUnknown* object) = 0;
+	/** send pending messages send by \param object or by any if object is 0 */
+	virtual tresult PLUGIN_API triggerDeferedUpdates (FUnknown* object = nullptr) = 0;
+	static const FUID iid;
+};
+
+DECLARE_CLASS_IID (IUpdateManager, 0x030B780C, 0xD6E6418D, 0x8CE00BC2, 0x09C834D4)
+
+//------------------------------------------------------------------------------
+/**
+UpdateHandler implements IUpdateManager and IUpdateHandler to handle dependencies
+between objects to store and forward messages to dependent objects.
+
+This implementation is thread save, so objects can send message, add or remove
+dependents from different threads.
+Do do so it uses mutex, so be aware of locking.
+*/
+//------------------------------------------------------------------------------
+class UpdateHandler : public FObject, public IUpdateHandler, public IUpdateManager
+{
+public:
+//------------------------------------------------------------------------------
+	UpdateHandler ();
+	~UpdateHandler ();
+
+	using FObject::addDependent;
+	using FObject::removeDependent;
+	using FObject::deferUpdate;
+
+	// IUpdateHandler
+	/** register \param dependent to get messages from \param object */
+	tresult PLUGIN_API addDependent (FUnknown* object, IDependent* dependent) SMTG_OVERRIDE;
+	/** unregister \param dependent to get no messages from \param object */
+	tresult PLUGIN_API removeDependent (FUnknown* object,
+	                                            IDependent* dependent) SMTG_OVERRIDE;
+	/** send \param message to all dependents of \param object immediately */
+	tresult PLUGIN_API triggerUpdates (FUnknown* object, int32 message) SMTG_OVERRIDE;
+	/** send \param message to all dependents of \param object when idle */
+	tresult PLUGIN_API deferUpdates (FUnknown* object, int32 message) SMTG_OVERRIDE;
+
+	// IUpdateManager
+	/** cancel pending messages send by \param object or by any if object is 0 */
+	tresult PLUGIN_API cancelUpdates (FUnknown* object) SMTG_OVERRIDE;
+	/** send pending messages send by \param object or by any if object is 0 */
+	tresult PLUGIN_API triggerDeferedUpdates (FUnknown* object = nullptr) SMTG_OVERRIDE;
+
+	/// @cond ignore
+	// obsolete functions kept for compatibility
+	void checkUpdates (FObject* object = nullptr) { triggerDeferedUpdates (object->unknownCast ()); }
+	void flushUpdates (FObject* object) { cancelUpdates (object->unknownCast ()); }
+	void deferUpdate (FObject* object, int32 message)
+	{
+		deferUpdates (object->unknownCast (), message);
+	}
+	void signalChange (FObject* object, int32 message, bool suppressUpdateDone = false)
+	{
+		doTriggerUpdates (object->unknownCast (), message, suppressUpdateDone);
+	}
+#if DEVELOPMENT
+	bool checkDeferred (FUnknown* object);
+	bool hasDependencies (FUnknown* object);
+	void printForObject (FObject* object) const;
+#endif
+	/// @endcond
+	size_t countDependencies (FUnknown* object = nullptr);
+	
+	OBJ_METHODS (UpdateHandler, FObject)
+	FUNKNOWN_METHODS2 (IUpdateHandler, IUpdateManager, FObject)
+	SINGLETON (UpdateHandler)
+//------------------------------------------------------------------------------
+private:
+	tresult doTriggerUpdates (FUnknown* object, int32 message, bool suppressUpdateDone);
+
+	Steinberg::Base::Thread::FLock lock;
+	Update::Table* table = nullptr;
+	friend struct LockUpdateDependencies;
+	static bool lockUpdates;
+};
+
+
+//------------------------------------------------------------------------
+} // namespace Steinberg
diff --git a/clean-gtk-doc.sh b/clean-gtk-doc.sh
index 62b3a9c0d..04ffb51f8 100755
--- a/clean-gtk-doc.sh
+++ b/clean-gtk-doc.sh
@@ -20,9 +20,12 @@ rm -f docs/reference/libags-audio/libags_audio-undocumented.txt
 rm -f docs/reference/libags-audio/libags_audio-unused.txt
 rm -f docs/reference/libags-audio/libags_audio.args
 rm -f docs/reference/libags-audio/libags_audio.hierarchy
+rm -f docs/reference/libags-audio/libags_audio.pdf
 rm -f docs/reference/libags-audio/libags_audio.prerequisites
 rm -f docs/reference/libags-audio/libags_audio.signals
 rm -f docs/reference/libags-audio/libags_audio.types.bak
+rm -f docs/reference/libags-audio/pdf.stamp
+rm -f docs/reference/libags-audio/pdf-build.stamp
 rm -f docs/reference/libags-audio/scan-build.stamp
 rm -f docs/reference/libags-audio/setup-build.stamp
 rm -f docs/reference/libags-audio/sgml-build.stamp
@@ -38,9 +41,12 @@ rm -f docs/reference/libags-gui/libags_gui-undocumented.txt
 rm -f docs/reference/libags-gui/libags_gui-unused.txt
 rm -f docs/reference/libags-gui/libags_gui.args
 rm -f docs/reference/libags-gui/libags_gui.hierarchy
+rm -f docs/reference/libags-gui/libags_gui.pdf
 rm -f docs/reference/libags-gui/libags_gui.prerequisites
 rm -f docs/reference/libags-gui/libags_gui.signals
 rm -f docs/reference/libags-gui/scan-build.stamp
+rm -f docs/reference/libags-gui/pdf.stamp
+rm -f docs/reference/libags-gui/pdf-build.stamp
 rm -f docs/reference/libags-gui/setup-build.stamp
 rm -f docs/reference/libags-gui/sgml-build.stamp
 rm -f docs/reference/libags-gui/sgml.stamp
@@ -72,9 +78,12 @@ rm -f docs/reference/libgsequencer/libgsequencer-undocumented.txt
 rm -f docs/reference/libgsequencer/libgsequencer-unused.txt
 rm -f docs/reference/libgsequencer/libgsequencer.args
 rm -f docs/reference/libgsequencer/libgsequencer.hierarchy
+rm -f docs/reference/libgsequencer/libgsequencer.pdf
 rm -f docs/reference/libgsequencer/libgsequencer.prerequisites
 rm -f docs/reference/libgsequencer/libgsequencer.signals
 rm -f docs/reference/libgsequencer/libgsequencer.types.bak
+rm -f docs/reference/libgsequencer/pdf.stamp
+rm -f docs/reference/libgsequencer/pdf-build.stamp
 rm -f docs/reference/libgsequencer/scan-build.stamp
 rm -f docs/reference/libgsequencer/setup-build.stamp
 rm -f docs/reference/libgsequencer/sgml-build.stamp
diff --git a/configure.ac b/configure.ac
index 4a155e973..74c39eb5d 100644
--- a/configure.ac
+++ b/configure.ac
@@ -215,9 +215,11 @@ AC_SUBST([LIBTOOL_DEPS])
 AC_ENABLE_SHARED
 
 AC_SUBST([GSEQUENCER_CFLAGS])
+AC_SUBST([GSEQUENCER_CXXFLAGS])
 AC_SUBST([GSEQUENCER_LDFLAGS])
 
 AC_SUBST([MIDI2XML_CFLAGS])
+AC_SUBST([MIDI2XML_CXXFLAGS])
 AC_SUBST([MIDI2XML_LDFLAGS])
 
 AC_SUBST([LIBAGS_CPPFLAGS])
@@ -482,12 +484,27 @@ AM_CONDITIONAL([WITH_LIBINSTPATCH], [test "x$enable_libinstpatch" == xyes])
 
 WITH_VST3=0
 
+if test "${LIBAGS_VST3_LIBDIR+set}" = set; then
+echo "variable \$LIBAGS_VST3_LIBDIR is set to: $LIBAGS_VST3_LIBDIR"
+else
+LIBAGS_VST3_LIBDIR="-L$libexecdir/lib/vst3"
+echo "variable \$LIBAGS_VST3_LIBDIR is set to: $LIBAGS_VST3_LIBDIR"
+fi
+
+if test "${LIBAGS_VST3_LIBS+set}" = set; then
+echo "variable \$LIBAGS_VST3_LIBS is set to: $LIBAGS_VST3_LIBS"
+else
+LIBAGS_VST3_LIBS="-lbase -lpluginterfaces -lsdk -lsdk_common -lsdk_hosting -lvstgui -lvstgui_standalone -lvstgui_support -lvstgui_uidescription"
+echo "variable \$LIBAGS_VST3_LIBS is set to: $LIBAGS_VST3_LIBS"
+fi
+
 AS_IF([test "x$enable_vst3" != xno],
       [AC_DEFINE([AGS_WITH_VST3], [1], [VST3 enabled])
       AC_SUBST(LIBAGS_VST3_RELEASE_TYPE)
       AC_SUBST(LIBAGS_VST3_CPPFLAGS)
       AC_SUBST(LIBAGS_VST3_CXXFLAGS)
       AC_SUBST(LIBAGS_VST3_LDFLAGS)
+      AC_SUBST(LIBAGS_VST3_LIBDIR)
       AC_SUBST(LIBAGS_VST3_LIBS)
       AC_MSG_NOTICE([VST3 enabled])],
       [AC_MSG_NOTICE([VST3 disabled])])
diff --git a/docs/reference/libags-audio/Makefile.in b/docs/reference/libags-audio/Makefile.in
index ef6f80132..d2fab0db3 100644
--- a/docs/reference/libags-audio/Makefile.in
+++ b/docs/reference/libags-audio/Makefile.in
@@ -447,6 +447,7 @@ GOBJECT_CFLAGS = @GOBJECT_CFLAGS@
 GOBJECT_LIBS = @GOBJECT_LIBS@
 GREP = @GREP@
 GSEQUENCER_CFLAGS = @GSEQUENCER_CFLAGS@
+GSEQUENCER_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 GSEQUENCER_FUNCTIONAL_TEST_LDADD = @GSEQUENCER_FUNCTIONAL_TEST_LDADD@
 GSEQUENCER_LDFLAGS = @GSEQUENCER_LDFLAGS@
 GSTREAMER_CFLAGS = @GSTREAMER_CFLAGS@
@@ -491,6 +492,7 @@ LIBAGS_THREAD_CPPFLAGS = @LIBAGS_THREAD_CPPFLAGS@
 LIBAGS_VST3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
 LIBAGS_VST3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
 LIBAGS_VST3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+LIBAGS_VST3_LIBDIR = @LIBAGS_VST3_LIBDIR@
 LIBAGS_VST3_LIBS = @LIBAGS_VST3_LIBS@
 LIBAGS_VST3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
 LIBASOUND2_CFLAGS = @LIBASOUND2_CFLAGS@
@@ -522,6 +524,7 @@ LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
 MAKEINFO = @MAKEINFO@
 MANIFEST_TOOL = @MANIFEST_TOOL@
 MIDI2XML_CFLAGS = @MIDI2XML_CFLAGS@
+MIDI2XML_CXXFLAGS = @MIDI2XML_CXXFLAGS@
 MIDI2XML_LDFLAGS = @MIDI2XML_LDFLAGS@
 MKDIR_P = @MKDIR_P@
 MSGFMT = @MSGFMT@
diff --git a/docs/reference/libags-gui/Makefile.in b/docs/reference/libags-gui/Makefile.in
index cb067cccd..d54d3e08c 100644
--- a/docs/reference/libags-gui/Makefile.in
+++ b/docs/reference/libags-gui/Makefile.in
@@ -447,6 +447,7 @@ GOBJECT_CFLAGS = @GOBJECT_CFLAGS@
 GOBJECT_LIBS = @GOBJECT_LIBS@
 GREP = @GREP@
 GSEQUENCER_CFLAGS = @GSEQUENCER_CFLAGS@
+GSEQUENCER_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 GSEQUENCER_FUNCTIONAL_TEST_LDADD = @GSEQUENCER_FUNCTIONAL_TEST_LDADD@
 GSEQUENCER_LDFLAGS = @GSEQUENCER_LDFLAGS@
 GSTREAMER_CFLAGS = @GSTREAMER_CFLAGS@
@@ -491,6 +492,7 @@ LIBAGS_THREAD_CPPFLAGS = @LIBAGS_THREAD_CPPFLAGS@
 LIBAGS_VST3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
 LIBAGS_VST3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
 LIBAGS_VST3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+LIBAGS_VST3_LIBDIR = @LIBAGS_VST3_LIBDIR@
 LIBAGS_VST3_LIBS = @LIBAGS_VST3_LIBS@
 LIBAGS_VST3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
 LIBASOUND2_CFLAGS = @LIBASOUND2_CFLAGS@
@@ -522,6 +524,7 @@ LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
 MAKEINFO = @MAKEINFO@
 MANIFEST_TOOL = @MANIFEST_TOOL@
 MIDI2XML_CFLAGS = @MIDI2XML_CFLAGS@
+MIDI2XML_CXXFLAGS = @MIDI2XML_CXXFLAGS@
 MIDI2XML_LDFLAGS = @MIDI2XML_LDFLAGS@
 MKDIR_P = @MKDIR_P@
 MSGFMT = @MSGFMT@
diff --git a/docs/reference/libags/Makefile.in b/docs/reference/libags/Makefile.in
index d7890cdf1..683019596 100644
--- a/docs/reference/libags/Makefile.in
+++ b/docs/reference/libags/Makefile.in
@@ -447,6 +447,7 @@ GOBJECT_CFLAGS = @GOBJECT_CFLAGS@
 GOBJECT_LIBS = @GOBJECT_LIBS@
 GREP = @GREP@
 GSEQUENCER_CFLAGS = @GSEQUENCER_CFLAGS@
+GSEQUENCER_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 GSEQUENCER_FUNCTIONAL_TEST_LDADD = @GSEQUENCER_FUNCTIONAL_TEST_LDADD@
 GSEQUENCER_LDFLAGS = @GSEQUENCER_LDFLAGS@
 GSTREAMER_CFLAGS = @GSTREAMER_CFLAGS@
@@ -491,6 +492,7 @@ LIBAGS_THREAD_CPPFLAGS = @LIBAGS_THREAD_CPPFLAGS@
 LIBAGS_VST3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
 LIBAGS_VST3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
 LIBAGS_VST3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+LIBAGS_VST3_LIBDIR = @LIBAGS_VST3_LIBDIR@
 LIBAGS_VST3_LIBS = @LIBAGS_VST3_LIBS@
 LIBAGS_VST3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
 LIBASOUND2_CFLAGS = @LIBASOUND2_CFLAGS@
@@ -522,6 +524,7 @@ LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
 MAKEINFO = @MAKEINFO@
 MANIFEST_TOOL = @MANIFEST_TOOL@
 MIDI2XML_CFLAGS = @MIDI2XML_CFLAGS@
+MIDI2XML_CXXFLAGS = @MIDI2XML_CXXFLAGS@
 MIDI2XML_LDFLAGS = @MIDI2XML_LDFLAGS@
 MKDIR_P = @MKDIR_P@
 MSGFMT = @MSGFMT@
diff --git a/docs/reference/libgsequencer/Makefile.in b/docs/reference/libgsequencer/Makefile.in
index 1557c3f4e..156768a0f 100644
--- a/docs/reference/libgsequencer/Makefile.in
+++ b/docs/reference/libgsequencer/Makefile.in
@@ -447,6 +447,7 @@ GOBJECT_CFLAGS = @GOBJECT_CFLAGS@
 GOBJECT_LIBS = @GOBJECT_LIBS@
 GREP = @GREP@
 GSEQUENCER_CFLAGS = @GSEQUENCER_CFLAGS@
+GSEQUENCER_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 GSEQUENCER_FUNCTIONAL_TEST_LDADD = @GSEQUENCER_FUNCTIONAL_TEST_LDADD@
 GSEQUENCER_LDFLAGS = @GSEQUENCER_LDFLAGS@
 GSTREAMER_CFLAGS = @GSTREAMER_CFLAGS@
@@ -491,6 +492,7 @@ LIBAGS_THREAD_CPPFLAGS = @LIBAGS_THREAD_CPPFLAGS@
 LIBAGS_VST3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
 LIBAGS_VST3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
 LIBAGS_VST3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+LIBAGS_VST3_LIBDIR = @LIBAGS_VST3_LIBDIR@
 LIBAGS_VST3_LIBS = @LIBAGS_VST3_LIBS@
 LIBAGS_VST3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
 LIBASOUND2_CFLAGS = @LIBASOUND2_CFLAGS@
@@ -522,6 +524,7 @@ LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
 MAKEINFO = @MAKEINFO@
 MANIFEST_TOOL = @MANIFEST_TOOL@
 MIDI2XML_CFLAGS = @MIDI2XML_CFLAGS@
+MIDI2XML_CXXFLAGS = @MIDI2XML_CXXFLAGS@
 MIDI2XML_LDFLAGS = @MIDI2XML_LDFLAGS@
 MKDIR_P = @MKDIR_P@
 MSGFMT = @MSGFMT@
diff --git a/m4/Makefile.in b/m4/Makefile.in
index 524fec329..66a61187e 100644
--- a/m4/Makefile.in
+++ b/m4/Makefile.in
@@ -197,6 +197,7 @@ GOBJECT_CFLAGS = @GOBJECT_CFLAGS@
 GOBJECT_LIBS = @GOBJECT_LIBS@
 GREP = @GREP@
 GSEQUENCER_CFLAGS = @GSEQUENCER_CFLAGS@
+GSEQUENCER_CXXFLAGS = @GSEQUENCER_CXXFLAGS@
 GSEQUENCER_FUNCTIONAL_TEST_LDADD = @GSEQUENCER_FUNCTIONAL_TEST_LDADD@
 GSEQUENCER_LDFLAGS = @GSEQUENCER_LDFLAGS@
 GSTREAMER_CFLAGS = @GSTREAMER_CFLAGS@
@@ -241,6 +242,7 @@ LIBAGS_THREAD_CPPFLAGS = @LIBAGS_THREAD_CPPFLAGS@
 LIBAGS_VST3_CPPFLAGS = @LIBAGS_VST3_CPPFLAGS@
 LIBAGS_VST3_CXXFLAGS = @LIBAGS_VST3_CXXFLAGS@
 LIBAGS_VST3_LDFLAGS = @LIBAGS_VST3_LDFLAGS@
+LIBAGS_VST3_LIBDIR = @LIBAGS_VST3_LIBDIR@
 LIBAGS_VST3_LIBS = @LIBAGS_VST3_LIBS@
 LIBAGS_VST3_RELEASE_TYPE = @LIBAGS_VST3_RELEASE_TYPE@
 LIBASOUND2_CFLAGS = @LIBASOUND2_CFLAGS@
@@ -272,6 +274,7 @@ LT_SYS_LIBRARY_PATH = @LT_SYS_LIBRARY_PATH@
 MAKEINFO = @MAKEINFO@
 MANIFEST_TOOL = @MANIFEST_TOOL@
 MIDI2XML_CFLAGS = @MIDI2XML_CFLAGS@
+MIDI2XML_CXXFLAGS = @MIDI2XML_CXXFLAGS@
 MIDI2XML_LDFLAGS = @MIDI2XML_LDFLAGS@
 MKDIR_P = @MKDIR_P@
 MSGFMT = @MSGFMT@
